// Generated by CoffeeScript 1.7.1
(function() {
  (function($, Backbone, Marionette, exports) {
    var BoxFooterView, BoxModel, BoxToolsRegular, BoxView, DangerView, FormView, InfoModel, InfoView, LoadingView, RestorableRegion, SmallBoxModel, SmallBoxView, SuccessView, WarningView, app, _base, _base1, _base2, _base3;
    if (exports.Avanzu == null) {
      exports.Avanzu = {};
    }
    if ((_base = exports.Avanzu).defaults == null) {
      _base.defaults = {};
    }
    RestorableRegion = Marionette.Region.extend({
      _cache: null,
      initialize: function() {
        return this._cache = this.$el.html();
      },
      onEmpty: function() {
        return this.$el.html(this._cache);
      }
    });
    InfoModel = Backbone.Model.extend({
      defaults: {
        message: '',
        title: ''
      }
    });
    InfoView = Marionette.ItemView.extend({
      template: '#message-view',
      className: 'alert alert-info',
      data: {},
      initialize: function(args) {
        if (args == null) {
          args = {};
        }
        this.model = new InfoModel(args);
        return this.listenTo(this.model, 'change', this.render);
      }
    });
    DangerView = InfoView.extend({
      className: 'alert alert-danger'
    });
    WarningView = InfoView.extend({
      className: 'alert alert-warning'
    });
    SuccessView = InfoView.extend({
      className: 'alert alert-success'
    });
    LoadingView = InfoView.extend({
      template: '#loading-view'
    });
    SmallBoxModel = Backbone.Model.extend({
      defaults: {
        title: '',
        message: '',
        icon: 'fa fa-exclamation-circle',
        linkText: '',
        color: 'aqua'
      }
    });
    SmallBoxView = Marionette.ItemView.extend({
      template: '#small-box-view',
      data: {},
      ui: {
        boxLink: '[data-action="box-link"]'
      },
      events: {
        'click [data-action="box-link"]': 'detailClick'
      },
      initialize: function(args) {
        if (args == null) {
          args = {};
        }
        this.model = new SmallBoxModel(args);
        return this.listenTo(this.model, 'change', this.render);
      },
      colorize: function(color) {
        this.model.set('color', color);
        return this;
      },
      detailClick: function(event) {
        event.preventDefault();
        return this.trigger('detail:click', this);
      }
    });
    BoxModel = Backbone.Model.extend({
      initialize: function() {
        this.on('change', this.update);
        return this.update();
      },
      defaults: {
        title: '',
        message: '',
        icon: 'fa fa-exclamation-circle',
        linkText: '',
        color: 'aqua',
        type: '',
        tile: false,
        solid: false,
        attr: ''
      },
      update: function() {
        var attr;
        attr = [];
        attr.push("box-" + (this.get('color')));
        if (!(this.get('solid' === false || this.get('tile' === false)))) {
          attr.push("box-solid");
        }
        if (!this.get('tile' === false)) {
          attr.push("bg-" + (this.get('color')));
        }
        return this.set('attr', attr.join(' '));
      }
    });
    BoxToolsRegular = Marionette.ItemView.extend({
      template: '#box-tools-regular',
      ui: {
        collapse: '[data-widget="collapse"]',
        remove: '[data-widget="remove"]'
      },
      events: {
        'click [data-widget="collapse"]': 'collapseClick'
      },
      collapseClick: function(event) {
        event.preventDefault();
        return this.trigger('collapse:click', this);
      },
      onRender: function() {
        return $('[data-toggle="tooltip"]', this.$el).tooltip();
      }
    });
    BoxView = Marionette.LayoutView.extend({
      model: BoxModel,
      template: '#box-view',
      initialize: function(args) {
        if (args == null) {
          args = {};
        }
        this.model = new BoxModel(args);
        return this.listenTo(this.model, 'change', this.render);
      },
      regions: {
        tools: '[data-role="box-tools"]',
        body: '[data-role="body"]'
      }
    });
    BoxFooterView = BoxView.extend({
      template: '#box-footer-view',
      regions: {
        tools: '[data-role="box-tools"]',
        body: '[data-role="body"]',
        footer: '[data-role="footer"]'
      }
    });
    FormView = Marionette.ItemView.extend({
      constructor: function() {
        Marionette.ItemView.prototype.constructor.apply(this, arguments);
        this.displayErrors = _.bind(this.displayErrors, this);
        this.on('render', this.updateView);
        return this.listenTo(this.model, 'error', this.displayErrors);
      },
      clearErrors: function() {
        this.$el.find('[data-role="error-message"]').remove();
        return this.$el.find('.has-error').removeClass('has-error');
      },
      displayErrors: function(model, xhr) {
        var $el, $parent, errors, field, messages, span, _results;
        errors = xhr.responseJSON;
        this.clearErrors();
        _results = [];
        for (field in errors) {
          messages = errors[field];
          $el = this.form[field];
          if (_.isArray(messages) === false || messages.length < 1) {
            continue;
          }
          if (($el != null) && (($parent = $el.parent()) != null)) {
            span = this.buildMessage(messages);
            _results.push($parent.addClass('has-error').append(span));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      },
      buildMessage: function(message) {
        var span;
        span = $('<span></span>');
        span.attr({
          'class': 'help-block text-danger',
          'data-role': 'error-message'
        });
        span.html(message.join('<br/>'));
        return span;
      },
      bindUIElements: function() {
        var $input, input, inputs, name, _i, _len, _results;
        Marionette.ItemView.prototype.bindUIElements.apply(this, arguments);
        this.form = {};
        inputs = this.$el.find('[data-bind]');
        _results = [];
        for (_i = 0, _len = inputs.length; _i < _len; _i++) {
          input = inputs[_i];
          $input = $(input);
          name = $input.attr('data-bind');
          _results.push(this.form[name] = $input);
        }
        return _results;
      },
      updateView: function() {
        var input, name, value, _ref, _results;
        _ref = this.form;
        _results = [];
        for (name in _ref) {
          input = _ref[name];
          value = this.model.get(name);
          _results.push(input.val(value));
        }
        return _results;
      },
      populateModel: function() {
        var input, name, val, _ref, _results;
        _ref = this.form;
        _results = [];
        for (name in _ref) {
          input = _ref[name];
          val = input.val();
          _results.push(this.model.set(name, val));
        }
        return _results;
      }
    });
    app = new Marionette.Application;
    app.addRegions({
      appTitle: RestorableRegion.extend({
        el: '#avanzu-admin-title'
      }),
      appNavbar: RestorableRegion.extend({
        el: '#avanzu-admin-navbar'
      }),
      appSidebar: RestorableRegion.extend({
        el: '#avanzu-admin-sidebar'
      }),
      appHeader: RestorableRegion.extend({
        el: '#avanzu-admin-content-header'
      }),
      appContent: '#avanzu-admin-content'
    });
    app.addInitializer(function(options) {
      if (options == null) {
        options = {};
      }
      return app.conf = $.extend(true, {}, exports.Avanzu.defaults, options);
    });
    if ((_base1 = exports.Avanzu).Admin == null) {
      _base1.Admin = app;
    }
    if ((_base2 = exports.Avanzu).Views == null) {
      _base2.Views = {
        MessageView: InfoView,
        InfoView: InfoView,
        WarningView: WarningView,
        DangerView: DangerView,
        LoadingView: LoadingView,
        SuccessView: SuccessView,
        SmallBoxView: SmallBoxView,
        BoxView: BoxView,
        BoxFooterView: BoxFooterView,
        BoxToolsRegular: BoxToolsRegular,
        FormView: FormView
      };
    }
    return (_base3 = exports.Avanzu).Models != null ? _base3.Models : _base3.Models = {
      BoxModel: BoxModel,
      SmallBoxModel: SmallBoxModel
    };
  })(jQuery, Backbone, Backbone.Marionette, window);

}).call(this);
